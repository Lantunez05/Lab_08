/* 
 * File:   Main_8.c
 * Author: Luis Antunez
 *
 * Created on 15 de abril de 2023, 11:30 PM
 */

// CONFIG1
#pragma config FOSC = INTRC_CLKOUT// Oscillator Selection bits (RC oscillator: CLKOUT function on RA6/OSC2/CLKOUT pin, RC on RA7/OSC1/CLKIN)
#pragma config WDTE = OFF       // Watchdog Timer Enable bit (WDT disabled and can be enabled by SWDTEN bit of the WDTCON register)
#pragma config PWRTE = OFF      // Power-up Timer Enable bit (PWRT disabled)
#pragma config MCLRE = OFF      // RE3/MCLR pin function select bit (RE3/MCLR pin function is digital input, MCLR internally tied to VDD)
#pragma config CP = OFF         // Code Protection bit (Program memory code protection is disabled)
#pragma config CPD = OFF        // Data Code Protection bit (Data memory code protection is disabled)
#pragma config BOREN = OFF      // Brown Out Reset Selection bits (BOR disabled)
#pragma config IESO = OFF       // Internal External Switchover bit (Internal/External Switchover mode is disabled)
#pragma config FCMEN = OFF      // Fail-Safe Clock Monitor Enabled bit (Fail-Safe Clock Monitor is disabled)
#pragma config LVP = OFF        // Low Voltage Programming Enable bit (RB3 pin has digital I/O, HV on MCLR must be used for programming)

// CONFIG2
#pragma config BOR4V = BOR40V   // Brown-out Reset Selection bit (Brown-out Reset set to 4.0V)
#pragma config WRT = OFF        // Flash Program Memory Self Write Enable bits (Write protection off)

// #pragma config statements should precede project file includes.
// Use project enums instead of #define for ON and OFF.


#include <xc.h>
#include <pic16f887.h>
#include <stdlib.h>
#include <stdio.h>
#define _XTAL_FREQ 10000000 

void setup(void);
void Potenciometro(void);
void Ascii(void);
void cadena(char txt[]); // Declaración de la función "cadena" 

void __interrupt() isr(void){
    if(PIR1bits.RCIF)
    {
        char opcion = RCREG;
        switch (opcion)
        {
            case '1': // En caso que presionemos 1, nos mande a leer el valor del potenciometro
                Potenciometro();
                break;
            case '2': // En caso que presionemos 2, enviemos Ascii al puerto B
                Ascii();
                break;
            default:
                cadena("Opcion no definida\r");
                while(RCREG != 13); // Esperar hasta que se presione Enter
            
        
        }
    }
}

void main (void){
    setup();
    char texto[] = "1. Leer potenciometro\r2. Enviar Ascii\r"; // Cadena de caracteres a enviar
    while (1){
        cadena(texto); // Llamada a la cadena
        __delay_ms(500); // Tiempos de espera de 5seg
    }
}

void cadena(char txt[]){
    int i = 0;
    while(txt[i] != '\0'){
        while(!TXSTAbits.TRMT); // Esperamos a que el registro de transmisión esté vacío
        TXREG = txt[i]; // Enviamos el caracter 
        i++;
    }
}

void setup(void){
    
    ANSEL = 0b00000001; // Habilitamos el pin AN0 para el ADC
    ANSELH = 0; 
    
    TRISB = 0;
    PORTB =  0x00;
    
    OSCCONbits.IRCF = 0b100;
    OSCCONbits.SCS = 1;
    
    //Configuracion de TX y RX
    TXSTAbits.SYNC = 0;
    TXSTAbits.BRGH = 1;
    
    BAUDCTLbits.BRG16 = 1;
    
    SPBRG = 25;
    SPBRGH = 0;
    
    RCSTAbits.SPEN = 1;
    RCSTAbits.RX9 = 0;        
    RCSTAbits.CREN = 1;
    
    TXSTAbits.TXEN = 1; //Habilitamos la transmision
    
    PIR1bits.RCIF = 0;
    PIE1bits.RCIE = 1;
    INTCONbits.PEIE = 1;
    INTCONbits.GIE = 1;
}

void Potenciometro (void)
{
    // Encendemos el módulo de ADC, seleccionamos el canal 0 (AN0), e iniciamos la conversión
    ADCON0 = 0b00000001;
    ADCON0 |= (0b0000 << 2);
    ADCON0 |= (1 << 1);
    
    while (ADCON0 &(1 << 1)); // Esperar a que la conversion termine
    
    int valor = ADRESH; // Leer valor de la conversion
    char buffer[4];
    sprintf(buffer, "%d\r", valor);
    cadena ("Valor del potenciometro: ");
    cadena (buffer);
    
    ADCON0bits.ADON = 0; // Apagar modulo ADC
}

void Ascii (void)
{
    cadena("Escriba un caracter: \r");
    while (!PIR1bits.RCIF); // Esperar el caracter
    char dato = RCREG;
    TXREG = dato; // Escribir el dato en la hiperterminal
    PORTB = dato; // Mandar el dato al puerto B

}
